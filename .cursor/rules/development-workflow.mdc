# 开发工作流程指南

## 包管理

- 使用 `pnpm` 作为包管理器
- 工作区配置在 [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml)
- 根目录的 [package.json](mdc:package.json) 包含工作区脚本

## 项目结构

- `packages/cosy-content/` - 核心内容管理库
- `packages/example/` - 标准示例项目
- `packages/example-cloudflare/` - Cloudflare 部署示例

## 常用命令

### 构建命令

```bash
# 构建 cosy-content 包
pnpm build:content

# 构建示例项目
cd packages/example && pnpm build

# 构建 Cloudflare 示例
cd packages/example-cloudflare && pnpm build
```

### 开发命令

```bash
# 启动示例项目开发服务器
cd packages/example && pnpm dev

# 启动 Cloudflare 示例开发服务器
cd packages/example-cloudflare && pnpm dev
```

### 安装依赖

```bash
# 安装所有依赖
pnpm install

# 安装特定包的依赖
pnpm --filter @coffic/cosy-content install
```

## 代码规范

### TypeScript 规范

- 所有新文件必须使用 TypeScript
- 严格类型检查，避免 `any` 类型
- 使用接口定义数据结构
- 导出类型和函数时使用明确的类型注解

### 文件命名

- 实体类：`XxxDoc.ts`
- 仓库类：`XxxRepo.ts`
- 工具类：小写命名，如 `link.ts`
- 页面文件：使用 Astro 的 `.astro` 扩展名

### 目录结构

- 内容文件：`content/` 目录下按类型组织
- 源代码：`src/` 目录下按功能模块组织
- 配置文件：根目录或 `src/` 目录下

## 添加新功能流程

1. **创建实体类**

   - 继承 `BaseDoc`
   - 实现 `SidebarProvider` 接口
   - 添加类型特定的方法

2. **创建仓库类**

   - 继承 `BaseDB`
   - 实现 CRUD 操作
   - 添加查询和过滤方法

3. **更新 Schema**

   - 在 [packages/cosy-content/src/schema.ts](mdc:packages/cosy-content/src/schema.ts) 中添加集合定义
   - 定义必要的数据字段

4. **更新工具类**

   - 在 [packages/cosy-content/src/utils/link.ts](mdc:packages/cosy-content/src/utils/link.ts) 中添加链接生成方法
   - 添加路由判断方法

5. **更新入口文件**

   - 在 [packages/cosy-content/src/index.ts](mdc:packages/cosy-content/src/index.ts) 中导出新类型

6. **更新示例项目**

   - 在示例项目的 `content.config.ts` 中添加新集合
   - 创建示例内容文件
   - 创建对应的页面组件

7. **测试构建**
   - 运行 `pnpm build:content` 确保类型检查通过
   - 运行示例项目的构建确保功能正常

## 错误处理

- 优先使用 TypeScript 类型系统避免运行时错误
- 使用 `cosyLogger` 进行日志记录
- 在关键操作中添加错误处理和验证 description: globs: alwaysApply: false

---
